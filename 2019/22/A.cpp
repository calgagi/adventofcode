/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Sat Dec 12 17:17:42 2020
 */

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

int n = 10007;
vector<pair<int,int>> ops;
vector<int> deck;

void parse(const string& s) {
    if (s == "deal into new stack") {
        ops.push_back(make_pair(0, 0));
    }
    else if (s.substr(0, 4) == "deal") {
        string x;
        int i = s.length() - 1;
        while (s[i] != ' ') {
            x += s[i];
            i--;
        }
        reverse(x.begin(), x.end());
        ops.push_back(make_pair(1, x));
    }
    else if (s.substr(0, 3) == "cut") {
        string x;
        int i = s.length() - 1;
        while (s[i] != ' ') {
            x += s[i];
            i--;
        }
        reverse(x.begin(), x.end());
        ops.push_back(make_pair(2, x));
    }
    return;
}

void deal() {
    reverse(deck.begin(), deck.end());
    return;
}

void deali(int jump) {
    vector<int> new_deck(n);
    for (int i = 0, j = jump % n; i < n; j = (j + jump) % n, i += 1) {
        new_deck[j] = new_deck[i];
    }
    deck = new_deck;
    return;
}

void cut(int x) {
    x = (((x - n) % n) + n) % n;
    vector<int> new_deck(n);
    for (int i = 0, j = (i - x) 
    return;
}
    

void solve() {
    string line;
    while (getline(cin, line)) {
        parse(line);
    }

    deck.resize(n);

    for (pair<int,int>& op : ops) {
        if (op.first == 0) {
            deal();
        }
        else if (op.first == 1) {
            deali(op.second);
        }
        else if (op.first == 2) {
            cut(op.second);
        }
    }

    return;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int num_tests = 1;
    /* cin >> num_tests; */
    for (int i = 0; i < num_tests; i++) {
        solve();
    }

    return 0;
}
