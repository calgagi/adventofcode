/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Sun Dec 12 20:55:49 2021
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

namespace cp {

class parser {
public:
    string input = "";
    int idx = 0, len = 0;

    parser() {
        string line;
        while (getline(cin, line)) input += (line += '\n');
        len = input.length();
    }

    parser(string filename) {
        fstream f(filename, ios_base::in);
        string line;
        if (f.is_open()) while (getline(f, line)) input += (line += '\n');
        len = input.length();
    }

    bool empty() {
        return idx >= len;
    } 

    ll get_ll() {
        string num = "";
        if (idx < len && input[idx] == '-') num += input[idx++];
        while (idx < len && input[idx] >= '0' && input[idx] <= '9') num += input[idx++];
        return stoll(num);
    }

    char get_char() {
        return (idx < len ? input[idx++] : ' ');
    }

    void ws() {
        while (idx < len && input[idx] == ' ' || input[idx] == '\n' || input[idx] == '\t') idx++;
    }

    string get_word() {
        string word = "";
        while (idx < len && ((input[idx] >= 'a' && input[idx] <= 'z') || (input[idx] >= 'A' && input[idx] <= 'Z'))) word += input[idx++];
        return word;
    }

    string get_until(char deliminator = ' ') {
        string res = "";
        while (idx < len && input[idx] != deliminator && input[idx] != '\n') res += input[idx++];
        return res;
    }

    char next() {
        return input[idx];
    }
};

}

/* ===== BEGIN USER CODE ===== */

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    cp::parser p;
    const int n = 2000;

    vector<vector<bool>> a(n, vector<bool>(n, false));
    vector<array<ll, 2>> f;

    auto print = [&]() {
        for (int i = 0; i < 100; i++) {
            for (int j = 0; j < 100; j++) {
                cout << (a[i][j] ? "1" : " ");
            }
            cout << endl;
        }
        cout << endl;
    };

    bool mode = false;
    while (!p.empty()) {
        if (!mode) {
            ll c = p.get_ll();
            p.get_char();
            ll r = p.get_ll();
            p.ws();
            a[r][c] = true;
            if (p.next() == 'f') {
                mode = true;
            }
        }
        else {
            p.get_until();
            p.ws();
            p.get_until();
            p.ws();
            char x = p.get_char();
            p.get_char();
            ll v = p.get_ll();
            p.ws();
            if (x == 'x') {
                f.push_back({0, v});
            }
            else {
                f.push_back({1, v});
            }
        }
    }

    for (auto [m, v] : f) {
        if (m == 0) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j <= v; j++) {
                    a[i][v - j] = a[i][v - j] || a[i][v + j];
                    a[i][v + j] = false;
                }
            }
        }
        else {
            for (int j = 0; j < n; j++) {
                for (int i = 0; i <= v; i++) {
                    a[v - i][j] = a[v - i][j] || a[v + i][j];
                    a[v + i][j] = false;
                }
            }
        }
    }

    print();

    return 0;
}
