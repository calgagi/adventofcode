/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Thu Dec 16 20:59:32 2021
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

namespace cp {

class parser {
public:
    string input = "";
    int idx = 0, len = 0;

    parser() {
        string line;
        while (getline(cin, line)) input += (line += '\n');
        len = input.length();
    }

    parser(string filename) {
        fstream f(filename, ios_base::in);
        string line;
        if (f.is_open()) while (getline(f, line)) input += (line += '\n');
        len = input.length();
    }

    bool empty() {
        return idx >= len;
    } 

    ll get_ll() {
        string num = "";
        if (idx < len && input[idx] == '-') num += input[idx++];
        while (idx < len && input[idx] >= '0' && input[idx] <= '9') num += input[idx++];
        return stoll(num);
    }

    char get_char() {
        return (idx < len ? input[idx++] : ' ');
    }

    void ws() {
        while (idx < len && input[idx] == ' ' || input[idx] == '\n' || input[idx] == '\t') idx++;
    }

    string get_word() {
        string word = "";
        while (idx < len && ((input[idx] >= 'a' && input[idx] <= 'z') || (input[idx] >= 'A' && input[idx] <= 'Z'))) word += input[idx++];
        return word;
    }

    string get_until(char deliminator = ' ') {
        string res = "";
        while (idx < len && input[idx] != deliminator && input[idx] != '\n') res += input[idx++];
        return res;
    }
};

}

/* ===== BEGIN USER CODE ===== */

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    cp::parser p;
    ll startX, startY, endX, endY;
    while (!p.empty()) {
        p.get_until();
        p.ws();
        p.get_until();
        p.ws();
        p.get_char();
        p.get_char();
        startX = p.get_ll();
        p.get_char(), p.get_char();
        endX = p.get_ll();
        p.get_char(), p.ws();
        p.get_char(), p.get_char();
        startY = p.get_ll();
        p.get_char(), p.get_char();
        endY = p.get_ll();
        p.ws();
    }

    auto inside = [&](ll x, ll y) -> bool {
        return x >= startX && x <= endX && y >= startY && y <= endY;
    };

    ll ans = 0;
    const int r = 500;
    auto test = [&](ll velocityX, ll velocityY) -> bool {
        ll x = 0, y = 0;
        ll maxY = 0;
        for (int s = 0; s < r; s++) {
            x += velocityX;
            y += velocityY;
            velocityX += (velocityX == 0 ? 0 : (velocityX < 0 ? 1 : -1));
            velocityY -= 1;
            if (inside(x, y)) {
                return true;
            }
        }
        return false;
    };

    for (ll vx = -r; vx <= r; vx++) {
        for (ll vy = -r; vy <= r; vy++) {
            if (test(vx, vy)) {
                ans++;
                cout << vx << " " << vy << endl;
            }
        }
    }

    cout << ans << endl;

    return 0;
}
