/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Tue Dec  7 21:00:03 2021
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

namespace cp {

class parser {
public:
    string input = "";
    int idx = 0, len = 0;

    parser() {
        string line;
        while (getline(cin, line)) input += (line += '\n');
        len = input.length();
    }

    parser(string filename) {
        fstream f(filename, ios_base::in);
        string line;
        if (f.is_open()) while (getline(f, line)) input += (line += '\n');
        len = input.length();
    }

    bool empty() {
        return idx >= len;
    } 

    ll get_ll() {
        string num = "";
        if (idx < len && input[idx] == '-') num += input[idx++];
        while (idx < len && input[idx] >= '0' && input[idx] <= '9') num += input[idx++];
        return stoll(num);
    }

    char get_char() {
        return (idx < len ? input[idx++] : ' ');
    }

    void ws() {
        while (idx < len && input[idx] == ' ' || input[idx] == '\n' || input[idx] == '\t') idx++;
    }

    string get_word() {
        string word = "";
        while (idx < len && ((input[idx] >= 'a' && input[idx] <= 'z') || (input[idx] >= 'A' && input[idx] <= 'Z'))) word += input[idx++];
        return word;
    }

    string get_until(char deliminator = ' ') {
        string res = "";
        while (idx < len && input[idx] != deliminator && input[idx] != '\n') res += input[idx++];
        return res;
    }
};

template <class F>
struct _rlamb {
    F f;
    template <class... Args>
    decltype(auto) operator()(Args&&... args) const { return f(*this, forward<Args>(args)...); }
};

template <class F>
_rlamb<decay_t<F>> rlamb(F&& f) { return { forward<F>(f) }; }

}

/* ===== BEGIN USER CODE ===== */

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    ll ans = 0;
    vector<string> s, e;
    vector<bool> used;
    vector<int> assignment;
    vector<int> assignment2;

    vector<vector<int>> digits = {
        {0, 1, 2, 4, 5, 6},
        {2, 5},
        {0, 2, 3, 4, 6},
        {0, 2, 3, 5, 6},
        {1, 2, 3, 5},
        {0, 1, 3, 5, 6},
        {0, 1, 3, 4, 5, 6},
        {0, 2, 5},
        {0, 1, 2, 3, 4, 5, 6},
        {0, 1, 2, 3, 5, 6}
    };

    auto test = [&]() -> bool {
        assignment2.assign(10, -1);
        int cnt = 0;
        for (int i = 0; i < 10; i++) {
            vector<int> lightup;
            for (const char c : s[i]) {
                lightup.push_back(assignment[c - 'a']);
            }
            sort(lightup.begin(), lightup.end());
            for (int j = 0; j < 10; j++) {
                if (lightup == digits[j]) { 
                    assignment2[i] = j;
                    cnt++;
                    break;
                }
            }
            if (assignment2[i] == -1) {
                return false;
            }
        }
        string v = "";
        for (string& x : e) {
            for (int i = 0; i < 10; i++) {
                if (s[i] == x) {
                    v += ('0' + assignment2[i]);
                }
            }
        }
        ans += stoll(v);
        return true;
    };

    auto build = cp::rlamb([&](auto&& build, int i) -> bool {
        if (i >= 7 && test()) {
            return true;
        }
        else if (i >= 7) {
            return false;
        }
        for (int j = 0; j < 7; j++) {
            if (!used[j]) {
                assignment[i] = j;
                used[j] = true;
                if (build(i + 1)) {
                    return true;
                }
                used[j] = false;
                assignment[i] = -1;
            }
        }
        return false;
    });

    cp::parser p;
    while (!p.empty()) {
        vector<string> s2(10), e2;
        for (int i = 0; i < 10; i++) {
            s2[i] = p.get_until();
            sort(s2[i].begin(), s2[i].end());
            p.ws();
        }
        char next = p.get_char();
        p.ws();
        while (next != '\n' && !p.empty()) {
            string x = p.get_until();
            sort(x.begin(), x.end());
            e2.push_back(x);
            next = p.get_char();
        }
        p.ws();
        s = s2, e = e2;
        used.assign(7, false);
        assignment.assign(7, -1);
        build(0);
    }

    cout << ans << endl;

    return 0;
}
