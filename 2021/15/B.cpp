/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Tue Dec 14 20:58:34 2021
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

namespace cp {

class parser {
public:
    string input = "";
    int idx = 0, len = 0;

    parser() {
        string line;
        while (getline(cin, line)) input += (line += '\n');
        len = input.length();
    }

    parser(string filename) {
        fstream f(filename, ios_base::in);
        string line;
        if (f.is_open()) while (getline(f, line)) input += (line += '\n');
        len = input.length();
    }

    bool empty() {
        return idx >= len;
    } 

    ll get_ll() {
        string num = "";
        if (idx < len && input[idx] == '-') num += input[idx++];
        while (idx < len && input[idx] >= '0' && input[idx] <= '9') num += input[idx++];
        return stoll(num);
    }

    char get_char() {
        return (idx < len ? input[idx++] : ' ');
    }

    void ws() {
        while (idx < len && input[idx] == ' ' || input[idx] == '\n' || input[idx] == '\t') idx++;
    }

    string get_word() {
        string word = "";
        while (idx < len && ((input[idx] >= 'a' && input[idx] <= 'z') || (input[idx] >= 'A' && input[idx] <= 'Z'))) word += input[idx++];
        return word;
    }

    string get_until(char deliminator = ' ') {
        string res = "";
        while (idx < len && input[idx] != deliminator && input[idx] != '\n') res += input[idx++];
        return res;
    }
};

template <class F>
struct _rlamb {
    F f;
    template <class... Args>
    decltype(auto) operator()(Args&&... args) const { return f(*this, forward<Args>(args)...); }
};

template <class F>
_rlamb<decay_t<F>> rlamb(F&& f) { return { forward<F>(f) }; }

}

/* ===== BEGIN USER CODE ===== */

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    cp::parser p;
    vector<vector<int>> a;

    while (!p.empty()) {
        vector<int> row;
        char x = p.get_char();
        while (x != '\n') {
            row.push_back(x - '0');
            x = p.get_char();
        }
        a.push_back(row);
        p.ws();
    }

    int n = a.size(), m = a[0].size();

    auto inc = [&]() -> void {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                a[i][j]++;
                a[i][j] %= 10;
                if (a[i][j] == 0) {
                    a[i][j] = 1;
                }
            }
        }
    };

    vector<vector<int>> grid(n * 5, vector<int>(m * 5));
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            for (int k = 0; k < i + j; k++) {
                inc();
            }
            for (int r = 0; r < n; r++) {
                for (int c = 0; c < m; c++) {
                    grid[i * n + r][j * m + c] = a[r][c];
                }
            }
            for (int k = 0; k < 9 - i - j; k++) {
                inc();
            }
        }
    }

    priority_queue<array<int, 3>, vector<array<int, 3>>, greater<array<int, 3>>> q;
    q.push({0, 0, 0});
    const int INF = 1e9;
    const vector<array<int, 2>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    vector<vector<int>> dist(5 * n, vector<int>(5 * m, INF));

    while (!q.empty()) {
        auto [d, i, j] = q.top();
        q.pop();
        if (i >= 5 * n || j >= 5 * m || j < 0 || i < 0 || dist[i][j] != INF) {
            continue;
        }
        d += grid[i][j];
        dist[i][j] = d;
        for (auto [di, dj] : dirs) {
            q.push({d, i + di, j + dj});
        }
    }

    cout << dist[5 * n - 1][5 * m - 1] - dist[0][0] << endl;

    return 0;
}
