/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Thu Dec 16 20:42:52 2021
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

namespace cp {

class parser {
public:
    string input = "";
    int idx = 0, len = 0;

    parser() {
        string line;
        while (getline(cin, line)) input += (line += '\n');
        len = input.length();
    }

    parser(string filename) {
        fstream f(filename, ios_base::in);
        string line;
        if (f.is_open()) while (getline(f, line)) input += (line += '\n');
        len = input.length();
    }

    bool empty() {
        return idx >= len;
    } 

    ll get_ll() {
        string num = "";
        if (idx < len && input[idx] == '-') num += input[idx++];
        while (idx < len && input[idx] >= '0' && input[idx] <= '9') num += input[idx++];
        return stoll(num);
    }

    char get_char() {
        return (idx < len ? input[idx++] : ' ');
    }

    void ws() {
        while (idx < len && input[idx] == ' ' || input[idx] == '\n' || input[idx] == '\t') idx++;
    }

    string get_word() {
        string word = "";
        while (idx < len && ((input[idx] >= 'a' && input[idx] <= 'z') || (input[idx] >= 'A' && input[idx] <= 'Z'))) word += input[idx++];
        return word;
    }

    string get_until(char deliminator = ' ') {
        string res = "";
        while (idx < len && input[idx] != deliminator && input[idx] != '\n') res += input[idx++];
        return res;
    }
};

template <class F>
struct _rlamb {
    F f;
    template <class... Args>
    decltype(auto) operator()(Args&&... args) const { return f(*this, forward<Args>(args)...); }
};

template <class F>
_rlamb<decay_t<F>> rlamb(F&& f) { return { forward<F>(f) }; }

}

/* ===== BEGIN USER CODE ===== */

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    cp::parser p;
    string in;
    while (!p.empty()) {
        in = p.get_until();
        p.ws();
    }

    vector<bool> bits(in.length() * 4, false);
    int j = 0;
    for (char& c : in) {
        int x = 0;
        if (isdigit(c)) {
            x = c - '0';
        }
        else {
            x = c - 'A' + 10;
        }
        for (int i = 3; ~i; i--) {
            if ((x & (1 << i))) bits[j] = true;
            j++;
        }
    }

    for (const bool& b : bits) {
        cout << (b ? 1 : 0);
    }
    cout << endl;

    int i = 0;
    int n = bits.size();
    vector<int> st;

    auto get_val = [&](int num_bits) -> ll {
        ll res = 0;
        for (int j = num_bits - 1; ~j && i < n; j--) {
            if (bits[i++]) {
                res |= (1LL << j);
            }
            for (int& x : st) {
                x--;
            }
            if (!st.empty() && st[st.size() - 1] == 0) {
                return res;
            }
        }
        return res;
    };

    auto apply_op = [&](const vector<ll>& vals, int opcode) -> ll {
        if (opcode == 5) {
            return (vals[0] > vals[1] ? 1 : 0);
        }
        else if (opcode == 6) {
            return (vals[0] < vals[1] ? 1 : 0);
        }
        else if (opcode == 7) {
            return (vals[0] == vals[1] ? 1 : 0);
        }
        ll ans = vals[0];
        for (int j = 1; j < (int) vals.size(); j++) {
            if (opcode == 0) {
                ans += vals[j];
            }
            else if (opcode == 1) {
                ans *= vals[j];
            }
            else if (opcode == 2) {
                ans = min(ans, vals[j]);
            }
            else if (opcode == 3) {
                ans = max(ans, vals[j]);
            }
        }
        return ans;
    };

    auto dfs = cp::rlamb([&](auto&& dfs) -> ll {
        int version = get_val(3);
        int typeId = get_val(3);

        vector<ll> vals;

        // literal
        if (typeId == 4) {
            ll lit = 0;
            bool cont = true;
            while (cont) {
                cont = (get_val(1) == 1); 
                lit <<= 4;
                lit |= get_val(4); 
            }
            return lit;
        }
        // operator
        else {
            int lTypeId = get_val(1);
            if (lTypeId == 0) {
                int len = get_val(15);
                cout << len << endl;
                st.push_back(len);
                while (st.back() > 0) {
                    vals.push_back(dfs());
                }
                st.pop_back();
            }
            else {
                int len = get_val(11);
                while (len--) {
                    vals.push_back(dfs());
                }
            }
            return apply_op(vals, typeId);
        }
    });

    cout << dfs() << endl;

    return 0;
}
