/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Sat Dec  4 21:01:57 2021
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

namespace cp {

class parser {
public:
    string input = "";
    int idx = 0, len = 0;

    parser() {
        string line;
        while (getline(cin, line)) input += (line += '\n');
        len = input.length();
    }

    parser(string filename) {
        fstream f(filename, ios_base::in);
        string line;
        if (f.is_open()) while (getline(f, line)) input += (line += '\n');
        len = input.length();
    }

    bool empty() {
        return idx >= len;
    } 

    ll get_ll() {
        string num = "";
        if (idx < len && input[idx] == '-') num += input[idx++];
        while (idx < len && input[idx] >= '0' && input[idx] <= '9') num += input[idx++];
        return stoll(num);
    }

    char get_char() {
        return (idx < len ? input[idx++] : ' ');
    }

    void ws() {
        while (idx < len && input[idx] == ' ' || input[idx] == '\n' || input[idx] == '\t') idx++;
    }

    string get_word() {
        string word = "";
        while (idx < len && ((input[idx] >= 'a' && input[idx] <= 'z') || (input[idx] >= 'A' && input[idx] <= 'Z'))) word += input[idx++];
        return word;
    }

    string get_until(char deliminator = ' ') {
        string res = "";
        while (idx < len && input[idx] != deliminator && input[idx] != '\n') res += input[idx++];
        return res;
    }
};

}

/* ===== BEGIN USER CODE ===== */

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    cp::parser p;
    const int n = 1010;
    vector<vector<int>> board(n, vector<int>(n, 0));
    while (!p.empty()) {
        ll x1 = p.get_ll();
        p.get_char();
        ll y1 = p.get_ll();
        p.get_char();
        p.ws();
        p.get_char(), p.get_char();
        p.ws();
        ll x2 = p.get_ll();
        p.get_char();
        ll y2 = p.get_ll();
        p.ws();
        if (x1 == x2 || y1 == y2) {
            for (int i = min(x1, x2); i <= max(x1, x2); i++) {
                for (int j = min(y1, y2); j <= max(y1, y2); j++) {
                    board[i][j]++;
                }
            }
        }
    }

    int ans = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            ans += board[i][j] >= 2;
        }
    }
    cout << ans << endl;


    return 0;
}
