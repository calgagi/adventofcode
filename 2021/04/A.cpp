/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Fri Dec  3 20:59:54 2021
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

namespace cp {

class parser {
public:
    string input = "";
    int idx = 0, len = 0;

    parser() {
        string line;
        while (getline(cin, line)) input += (line += '\n');
        len = input.length();
    }

    parser(string filename) {
        fstream f(filename, ios_base::in);
        string line;
        if (f.is_open()) while (getline(f, line)) input += (line += '\n');
        len = input.length();
    }

    bool empty() {
        return idx >= len;
    } 

    ll get_ll() {
        string num = "";
        if (idx < len && input[idx] == '-') num += input[idx++];
        while (idx < len && input[idx] >= '0' && input[idx] <= '9') num += input[idx++];
        return stoll(num);
    }

    char get_char() {
        return (idx < len ? input[idx++] : ' ');
    }

    void ws() {
        while (idx < len && input[idx] == ' ' || input[idx] == '\n' || input[idx] == '\t') idx++;
    }

    string get_word() {
        string word = "";
        while (idx < len && ((input[idx] >= 'a' && input[idx] <= 'z') || (input[idx] >= 'A' && input[idx] <= 'Z'))) word += input[idx++];
        return word;
    }

    string get_until(char deliminator = ' ') {
        string res = "";
        while (idx < len && input[idx] != deliminator && input[idx] != '\n') res += input[idx++];
        return res;
    }
};

}

/* ===== BEGIN USER CODE ===== */

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    cp::parser p;
    vector<int> nums;
    vector<vector<vector<int>>> boards;
    bool mode = true;
    while (!p.empty()) {
        if (mode) {
            nums.push_back(stoi(p.get_until(',')));
            char nxt = p.get_char();
            if (nxt == '\n') {
                mode = false;
            }
            cout << nums.back() << " ";
        }
        else {
            cout << endl;
            vector<vector<int>> board(5, vector<int>(5));
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    board[i][j] = p.get_ll();
                    cout << board[i][j] << " ";
                    p.ws();
                }
                cout << endl;
            }
            cout << endl;
            boards.push_back(board);
        }
        p.ws();
    }

    vector<vector<vector<bool>>> ok(boards.size(), vector<vector<bool>>(5, vector<bool>(5, false)));

    auto apply = [&](int idx, int x) -> int {
        int val = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (boards[idx][i][j] == x) {
                    ok[idx][i][j] = true;
                }
                else if (!ok[idx][i][j]) {
                    val += boards[idx][i][j];
                }
            }
        }
        for (int i = 0; i < 5; i++) {
            int cnt = 0;
            for (int j = 0; j < 5; j++) {
                if (ok[idx][i][j]) {
                    cnt++;
                }
            }
            if (cnt == 5) {
                return val;
            }
        }
        for (int i = 0; i < 5; i++) {
            int cnt = 0;
            for (int j = 0; j < 5; j++) {
                if (ok[idx][j][i]) {
                    cnt++;
                }
            }
            if (cnt == 5) {
                return val;
            }
        }
        /* int cnt = 0, cnt2 = 0; */
        /* for (int i = 0; i < 5; i++) { */
        /*     if (ok[idx][i][i]) { */
        /*         cnt++; */
        /*     } */
        /*     if (ok[idx][5 - i - 1][5 - i - 1]) { */
        /*         cnt2++; */
        /*     } */
        /* } */
        /* if (cnt2 == 5 || cnt == 5) { */
        /*     return val; */
        /* } */
        return -1;
    };
    
    int ans = -1;
    for (int& x : nums) {
        for (int i = 0; i < (int) boards.size(); i++) {
            int v = apply(i, x);
            if (v != -1) {
                ans = v * x;
                break;
            }
        }
        if (ans != -1) {
            break;
        }
    }
    cout << ans << endl;

    return 0;
}
