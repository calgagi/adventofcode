/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Mon Dec 13 21:00:06 2021
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

namespace cp {

class parser {
public:
    string input = "";
    int idx = 0, len = 0;

    parser() {
        string line;
        while (getline(cin, line)) input += (line += '\n');
        len = input.length();
    }

    parser(string filename) {
        fstream f(filename, ios_base::in);
        string line;
        if (f.is_open()) while (getline(f, line)) input += (line += '\n');
        len = input.length();
    }

    bool empty() {
        return idx >= len;
    } 

    ll get_ll() {
        string num = "";
        if (idx < len && input[idx] == '-') num += input[idx++];
        while (idx < len && input[idx] >= '0' && input[idx] <= '9') num += input[idx++];
        return stoll(num);
    }

    char get_char() {
        return (idx < len ? input[idx++] : ' ');
    }

    void ws() {
        while (idx < len && input[idx] == ' ' || input[idx] == '\n' || input[idx] == '\t') idx++;
    }

    string get_word() {
        string word = "";
        while (idx < len && ((input[idx] >= 'a' && input[idx] <= 'z') || (input[idx] >= 'A' && input[idx] <= 'Z'))) word += input[idx++];
        return word;
    }

    string get_until(char deliminator = ' ') {
        string res = "";
        while (idx < len && input[idx] != deliminator && input[idx] != '\n') res += input[idx++];
        return res;
    }
};

}

/* ===== BEGIN USER CODE ===== */

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    cp::parser p;
    unordered_map<string, char> m;

    string s = p.get_until();
    cout << s << endl;
    p.ws();

    while (!p.empty()) {
        string x = p.get_until();
        p.ws();
        p.get_until();
        p.ws();
        char c = p.get_char();
        p.ws();
        m[x] = c;
        cout << x << " " << c << endl;
    }

    const int n = 10;

    for (int t = 0; t < n; t++) {
        string new_s = "";
        for (int i = 0; i < (int) s.length() - 1; i++) {
            new_s += s[i];
            string v = ""; v += s[i]; v += s[i + 1];
            if (m.find(v) != m.end()) {
                new_s += m[v];
            }
        }
        new_s += s.back();
        s = new_s;
        cout << s << endl;
    }

    vector<int> cnt(26, 0);
    for (char c : s) {
        cnt[c - 'A']++;
    }

    int mx = -1, mn = INT_MAX;
    for (int i = 0; i < 26; i++) {
        mx = max(mx, cnt[i]);
        if (cnt[i] != 0) {
            mn = min(mn, cnt[i]);
        }
    }
    cout << mx << " " << mn << endl;

    cout << mx - mn << endl;

    return 0;
}
