/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Sat Dec 19 20:59:38 2020
 */

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

vector<string> in;
map<int, vector<string>> tile;
map<int, vector<vector<string>>> transforms;
vector<int> ids;

// 0 = ID, 1 = orientation, 2 = direction
map<array<int,2>, vectorarray<int,3>>> graph;

const int side = 12;
const int w = 10;

vector<string> rotate(const vector<string>& a) {
    vector<string> ans = a;
    for (int i = 0; i < w-1; i++) {
        ans[0][i] = a[i][w-1];
        ans[i][w-1] = a[w-1][w-1-i];
        ans[w-1][w-1-i] = a[w-1-i][0];
        ans[w-1-i][0] = a[0][i];
    }
    return ans;
}

vector<string> mirror(const vector<string>& a) {
    vector<string> ans = a;
    int w = a.size();
    for (int i = 0; i < w; i++) {
        ans[i][0] = a[i][w-1];
    }
    return ans;
}

bool matches(const vector<string>& a, const vector<string>& b, int direction) {
}

void print_tile(const vector<string>& x) {
    for (const string& a : x) {
        cout << a << endl;
    }
    cout << endl;
}

void solve() {
    string line;
    while (getline(cin,line)) {
        in.push_back(line);
    }

    for (int i = 0; i < (int) in.size(); i++) {
        string num = in[i].substr(in[i].find(" ") + 1);
        num.pop_back();
        id = stoi(num);
        i++;
        for (int j = 0; j < 10; j++, i++) {
            tile[id].push_back(in[i]);
        }
        ids.push_back(id);
    }

    // create these 
    for (const pair<int,vector<string>>& t : tile) {
        vector<string> x = t.second;
        transforms[t.first].push_back(x);
        for (int i = 0; i < 4; i++) {
            x = rotate(x);
            transforms[t.first].push_back(x);
            transforms[t.first].push_back(mirror(x));
        }
    }

    for (int i = 0; i < (int) ids.size(); i++) {
        for (int j = i+1; j < (int) ids.size(); j++) {
            for (int k = 0; k < 8; k++) {
                for (int l = 0; l < 8; l++) {
                    if (matches(transforms[ids[i]][k], transforms[ids[j]][l])) {
                        graph[{i, k}].push_back({j, l});
                    }
                }
            }
        }
    }

    return;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int num_tests = 1;
    /* cin >> num_tests; */
    for (int i = 0; i < num_tests; i++) {
        solve();
    }

    return 0;
}
