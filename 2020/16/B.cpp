/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Tue Dec 15 21:03:50 2020
 */

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

vector<pair<string, vector<pair<int,int>>>> field;
vector<vector<int>> scanned;
vector<int> you;
int n = 0;
vector<pair<int,vector<int>>> candidates;

vector<int> fieldToIdx;

bool build(int i, int used) {
    if (i == n) {
        return true;
    }
    for (int& j : candidates[i].second) {
        if (!(used & (1 << j))) {
            fieldToIdx[candidates[i].first] = j;
            if (build(i+1, used | (1 << j))) return true;
            fieldToIdx[candidates[i].first] = -1;
        }
    }
    return false;
}

void solve() {
    vector<string> in;
    string line;
    while (getline(cin, line)) {
        in.push_back(line);
    }

    int mode = 0;
    for (string& s : in) {
        if (s == "") {
            mode++;
            continue;
        }
        if (mode == 0) {
            int pos = s.find(":");
            string f = s.substr(0, pos);
            pos = s.find("-");
            string num;
            int first, second;
            field.push_back(make_pair(f, vector<pair<int,int>>())); 
            int idx = field.size() - 1;

            for (int i = pos-1; i >= 0 && s[i] != ' '; i--) {
                num += s[i];
            }
            reverse(num.begin(), num.end());
            first = stoi(num);
            num = "";
            for (int i = pos+1; i < (int) s.length() && s[i] != ' '; i++) {
                num += s[i];
            }
            second = stoi(num);
            num = "";
            field[idx].second.push_back(make_pair(first, second));

            pos = s.find("-", pos+1);
            for (int i = pos-1; i >= 0 && s[i] != ' '; i--) {
                num += s[i];
            }
            reverse(num.begin(), num.end());
            first = stoi(num);
            num = "";
            for (int i = pos+1; i < (int) s.length() && s[i] != ' '; i++) {
                num += s[i];
            }
            second = stoi(num);
            num = "";
            field[idx].second.push_back(make_pair(first, second));
            cout << field[idx].first << ": ";
            for (pair<int,int>& x : field[idx].second) {
                cout << x.first << "-" << x.second << " ";
            }
            cout << endl;
        } 
        else if (mode == 1) {
            if (s == "your ticket:") continue;
            n = field.size();
            string num;
            for (int i = 0; i < (int) s.length(); i++) {
                num = "";
                while (i < (int) s.length() && s[i] != ',')
                    num += s[i++];
                you.push_back(stoi(num));
                /* cout << you.back() << endl; */
            }
        }
        else if (mode == 2) {
            if (s == "nearby tickets:") continue;
            vector<int> cur;
            string num;
            for (int i = 0; i < (int) s.length(); i++) {
                num = "";
                while (i < (int) s.length() && s[i] != ',')
                    num += s[i++];
                cur.push_back(stoi(num));
                /* cout << cur.back() << ","; */
            }
            /* cout << endl; */
            scanned.push_back(cur);
        }
    }

    // INPUT PARSED NOW
    
    for (int k = 0; k < (int) scanned.size(); k++) {
        for (int i = 0; i < n; i++) {
            bool ok = false;
            for (int j = 0; j < n; j++) {
                for (pair<int,int>& range : field[j].second) {
                    if (range.first <= scanned[k][i] && range.second >= scanned[k][i]) {
                        ok = true;
                    }
                }
            }
            if (!ok) {
                scanned.erase(scanned.begin()+k);
                k--;
                break;
            }
        }
    }

    cout << n << endl;
    scanned.push_back(you);
    
    // for each field
    for (int i = 0; i < n; i++) {
        // for all columns
        candidates.push_back(make_pair(i, vector<int>()));
        for (int j = 0; j < n; j++) {
            // for all elements in that column
            bool columnGood = true;
            for (int k = 0; k < (int) scanned.size(); k++) {
                bool elementGood = false;
                for (pair<int,int>& range : field[i].second) {
                    if (range.first <= scanned[k][j] && range.second >= scanned[k][j]) {
                        elementGood = true;
                        break;
                    }
                }
                if (!elementGood) {
                    columnGood = false;
                    break;
                }
            }
            if (columnGood) {
                candidates[i].second.push_back(j);
            }
        }
    }
    
    sort(candidates.begin(), candidates.end(), [&](const pair<int,vector<int>>& a, const pair<int,vector<int>>& b) {
        return a.second.size() < b.second.size();
    });

    fieldToIdx.assign(n, -1);
    build(0, 0);

    ll ans = 1;
    for (int i = 0; i < n; i++) {
        if (field[i].first.find("departure") != string::npos) {
            ans *= you[fieldToIdx[i]];
        }
    }
    cout << ans << endl;

    return;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int num_tests = 1;
    /* cin >> num_tests; */
    for (int i = 0; i < num_tests; i++) {
        solve();
    }

    return 0;
}
