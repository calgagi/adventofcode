/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Mon Dec 21 21:35:30 2020
 */

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

string gather(queue<int> a, queue<int> b) {
    string s = "";
    while (!a.empty()) {
        s += to_string(a.front());
        s += ",";
        a.pop();
    }
    s += " ";
    while (!b.empty()) {
        s += to_string(b.front());
        s += ",";
        b.pop();
    }
    return s;
}

queue<int> w;

bool game(queue<int> q1, queue<int> q2) {
    unordered_set<string> seen;
    while (!q1.empty() && !q2.empty()) {
        string hash = gather(q1, q2);
        if (seen.find(hash) != seen.end()) {
            w = q1;
            return true;
        }
        seen.insert(hash);

        int a = q1.front(), b = q2.front();
        q1.pop(), q2.pop();
        bool winner = b < a;
        if (a <= q1.size() && b <= q2.size()) {
            queue<int> q3 = q1, q4 = q2, q5, q6;
            for (int i = 0; i < a; i++) {
                q5.push(q3.front());
                q3.pop();
            }
            for (int i = 0; i < b; i++) {
                q6.push(q4.front());
                q4.pop();
            }
            winner = game(q5, q6);
        }
        if (!winner) {
            q2.push(b);
            q2.push(a);
        }
        else {
            q1.push(a);
            q1.push(b);
        }
    }
    w = (q1.empty() ? q2 : q1);
    return q1.empty() ? false : true;
}


void solve() {
    string line;
    bool player = 0;
    queue<int> q1, q2;

    while (getline(cin, line)) {
        if (line.find("Player") != string::npos) {
            continue;
        }
        else if (line == "") {
            player = !player;
        }
        else {
            if (!player) {
                q1.push(stoi(line));
            }
            else {
                q2.push(stoi(line));
            }
        }
    }

    game(q1, q2);

    ll ans = 0, n = w.size();
    while (!w.empty()) {
        ans += n * w.front();
        w.pop();
        n--;
    }

    cout << ans << endl;

    return;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int num_tests = 1;
    /* cin >> num_tests; */
    for (int i = 0; i < num_tests; i++) {
        solve();
    }

    return 0;
}
