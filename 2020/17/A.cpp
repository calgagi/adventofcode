/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Wed Dec 16 21:02:51 2020
 */

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const int MAX_CYCLE = 6;
vector<vector<vector<vector<char>>>> space;
const char active = '#', inactive = '.';
int n, m, l, o;
vector<string> in;
vector<array<int,4>> dirs;

void parse() {
    int expand = 2 * MAX_CYCLE;
    n = expand + (int) in.size();
    m = expand + (int) in[0].length();
    l = expand + 1;
    o = expand + 1;
    cout << n << " " << m << " " << l << endl;

    space.assign(n, vector<vector<vector<char>>>(m, vector<vector<char>>(l, vector<char>(o, '.'))));
    for (int i = MAX_CYCLE; i < n - MAX_CYCLE; i++) {
        for (int j = MAX_CYCLE; j < m - MAX_CYCLE; j++) {
            space[i][j][l / 2][o / 2] = in[i - MAX_CYCLE][j - MAX_CYCLE];
        }
    }

    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            for (int k = -1; k <= 1; k++) {
                for (int a = -1; a <= 1; a++) {
                    if (i == j && a == i && k == j && i == 0) {
                        continue;
                    }
                    dirs.push_back({i, j, k, a});
                }
            }
        }
    }

    return;
}

bool is_valid(int i, int j, int k, int a) {
    return i >= 0 && j >= 0 && k >= 0 && i < n && j < m && k < l && a >= 0 && a < o;
}

void calc() {
    vector<vector<vector<vector<char>>>> new_space = space;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            for (int k = 0; k < l; k++) {
                for (int a = 0; a < o; a++) {
                    int count = 0;
                    for (array<int,4>& dir : dirs) {
                        int x = i + dir[0], y = j + dir[1], z = k + dir[2], b = a + dir[3];
                        if (is_valid(x, y, z, b)) {
                            count += space[x][y][z][b] == active;
                        }
                    }
                    if (space[i][j][k][a] == active) {
                        new_space[i][j][k][a] = (count <= 3 && count >= 2 ? active : inactive);
                    }
                    else if (space[i][j][k][a] == inactive) {
                        new_space[i][j][k][a] = (count == 3 ? active : inactive);
                    }
                }
            }
        }
    }
    space = new_space;
    return;
}

void solve() {
    string line;
    while (cin >> line) {
        in.push_back(line);
    }

    parse();

    for (int i = 0; i < MAX_CYCLE; i++) {
        calc(); 
    }

    ll ans = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            for (int k = 0; k < l; k++) {
                for (int a = 0; a < o; a++) {
                    ans += space[i][j][k][a] == active;
                }
            }
        }
    }
    cout << ans << endl;

    return;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int num_tests = 1;
    /* cin >> num_tests; */
    for (int i = 0; i < num_tests; i++) {
        solve();
    }

    return 0;
}
