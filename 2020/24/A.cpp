/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Sat Dec 26 22:59:17 2020
 */

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 1000, LIFE = 100;

vector<vector<bool>> color(N, vector<bool>(N, false));

map<string, int> str_to_idx = { 
    {"e", 0}, {"w", 1}, {"ne", 2}, {"sw", 3}, {"nw", 4}, {"se", 5}
};

vector<array<int,2>> adj = {
    {0, 1}, {0, -1}, {-1, 0}, {1, 0}, {-1, -1}, {1, 1}
};

int ans = 0;

void go(const string& s) {
    int r = N / 2, c = N / 2;
    string cur = "";
    for (int i = 0; i < (int) s.length(); i++) {
        cur += s[i];
        if (cur == "e" || cur == "w" || cur == "se" || cur == "sw" || cur == "ne" || cur == "nw") { 
            c += adj[str_to_idx[cur]][1];
            r += adj[str_to_idx[cur]][0];
            cur = "";
        } 
    }
    color[r][c] = !color[r][c];
    ans += color[r][c] ? 1 : -1;
    return;
}

bool valid(int r, int c) {
    return r >= 0 && c >= 0 && r < N && c < N;
}

void go2() {
    vector<vector<bool>> ncolor = color;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            int black = 0;
            for (auto [dr, dc] : adj) {
                black += valid(i + dr, j + dc) && color[i + dr][j + dc];
            }
            if (color[i][j] && (black == 0 || black > 2)) {
                ncolor[i][j] = false;
                ans--;
            }
            else if (!color[i][j] && black == 2) {
                ncolor[i][j] = true;
                ans++;
            }
        }
    }
    color = ncolor;
    return;
}
                

void solve() {
    string s;
    while (cin >> s) {
        go(s);
    }

    for (int i = 1; i <= LIFE; i++) {
        go2();
        cout << "Day " << i << ": " << ans << endl;
    }
    return;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int num_tests = 1;
    /* cin >> num_tests; */
    for (int i = 0; i < num_tests; i++) {
        solve();
    }

    return 0;
}
