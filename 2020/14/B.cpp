/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Sun Dec 13 21:08:07 2020
 */

#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const ll bits = 36;
vector<pair<string,string>> in;
map<ll,ll> mem;

ll convert(const string& s) {
    ll ans = 0;
    for (int i = 0; i < bits; i++) {
        assert(s[i] != 'X');
        if (s[i] == '1') {
            ans |= (1LL << (bits - i - 1));
        }
    }
    return ans;
}

void build(int i, string address, const ll& val) {
    for (; i < bits; i++) {
        if (address[i] == 'X') {
            address[i] = '0';
            build(i, address, val);
            address[i] = '1';
            build(i, address, val);
            address[i] = 'X';
            break;
        }
    }
    if (i == bits) {
        mem[convert(address)] = val;
        return;
    }
}

void solve() {
    string first, equals, second;
    while (cin >> first >> equals >> second) {
        in.push_back(make_pair(first, second));
    }

    string mask = "";
    for (pair<string,string>& p : in) {
        if (p.first == "mask") {
            mask = p.second;
            // complexity check
            int count = 0;
            for (int i = 0; i < 36; i++) {
                if (mask[i] == 'X') {
                    count++;
                }
            }
            cout << mask << endl;
        }
        else {
            p.first.pop_back(); 
            ll address = stoll(p.first.substr(4));
            string addy(36, '0');
            ll val = stoll(p.second);
            for (int i = 0; i < bits; i++) {
                if ((1LL & (address >> bits - i - 1))) {
                    addy[i] = '1';
                }
                if (mask[i] == '1') {
                    addy[i] = '1';
                }
                else if (mask[i] == '0') {
                    // nothing
                }
                else if (mask[i] == 'X') {
                    addy[i] = 'X';
                }
            }
            cout << addy << endl;
            build(0, addy, val);
        }
    }

    ll ans = 0;
    for (pair<ll,ll> x : mem) {
        ans += x.second;
    }
    cout << ans << endl;

    return;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int num_tests = 1;
    /* cin >> num_tests; */
    for (int i = 0; i < num_tests; i++) {
        solve();
    }

    return 0;
}
