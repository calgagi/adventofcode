/*
 * generated by github.com/calgagi/cp_gen
 * file: B.cpp
 * time: Sun Dec 13 12:26:59 2020
 */

#include<bits/stdc++.h>

using namespace std;

typedef long long ll; 
typedef long double ld;

ll m_pow(ll base, ll exp, ll mod) {
    base %= mod;
    ll ans = 1;
    while (exp >= 1LL) {
        if ((exp & 1LL)) {
            ans = (ans * base) % mod;
        }
        exp >>= 1;
        base = (base * base) % mod;
    }
    return ans;
}


void solve() {
    string s;
    getline(cin, s);
    getline(cin, s);

    vector<ll> nums, rem;
    for (int i = 0, j = 0; i < (int) s.length(); i++, j++) {
        string num = "";
        while (i < (int) s.length() && s[i] != ',')
            num += s[i++];
        if (num != "x") {
            nums.push_back(stoll(num));
            // we want X such that:
            // (X + rem[i]) % nums[i] == 0
            // that is:
            // X % nums[i] == -rem[i]
            // where -rem[i] is the additive inverse of rem[i]. therefore:
            // X % nums[i] == nums[i] - rem[i]
            ll r = stoll(num) - j;
            r %= stoll(num);
            if (r < 0) {
                r += stoll(num);
            }
            cout << r << endl;
            rem.push_back(r);
        }
    }

    // here, we have to find X
    int n = nums.size();

    ll N = 1;
    for (int i = 0; i < n; i++) {
        N *= nums[i];
    }

    // CRT states that X = \SUM_{i=0}^n (N / nums[i]) * rem[i] * pow(N / nums[i], nums[i] - 2, nums[i])
    ll ans = 0;
    for (int i = 0; i < n; i++) {
        cout << nums[i] << " " << rem[i] << endl;
        ans += (N / nums[i]) * rem[i] * m_pow(N / nums[i], nums[i] - 2, nums[i]);
        ans %= N;
    }

    cout << ans << endl;

    return;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    srand(chrono::steady_clock::now().time_since_epoch().count());

    int num_tests = 1;
    /* cin >> num_tests; */
    for (int i = 0; i < num_tests; i++) {
        solve();
    }

    return 0;
}
