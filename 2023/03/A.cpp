/*
 * generated by github.com/calgagi/cp_gen
 * file: A.cpp
 * time: Tue Dec 12 15:56:04 2023
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

namespace cp {

class parser {
public:
    string input = "";
    int idx = 0, len = 0;

    parser() {
        string line;
        while (getline(cin, line)) input += (line += '\n');
        len = input.length();
    }

    parser(string filename) {
        fstream f(filename, ios_base::in);
        string line;
        if (f.is_open()) while (getline(f, line)) input += (line += '\n');
        len = input.length();
    }

    bool empty() {
        return idx >= len;
    } 

    ll get_ll() {
        string num = "";
        if (idx < len && input[idx] == '-') num += input[idx++];
        while (idx < len && input[idx] >= '0' && input[idx] <= '9') num += input[idx++];
        return stoll(num);
    }

    char get_char() {
        return (idx < len ? input[idx++] : ' ');
    }

    void ws() {
        while (idx < len && input[idx] == ' ' || input[idx] == '\n' || input[idx] == '\t') idx++;
    }

    string get_word() {
        string word = "";
        while (idx < len && ((input[idx] >= 'a' && input[idx] <= 'z') || (input[idx] >= 'A' && input[idx] <= 'Z'))) word += input[idx++];
        return word;
    }

    string get_until(char deliminator = ' ') {
        string res = "";
        while (idx < len && input[idx] != deliminator && input[idx] != '\n') res += input[idx++];
        return res;
    }
};

}

/* ===== BEGIN USER CODE ===== */

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    cp::parser p;
    vector<string> in;
    while (!p.empty()) {
        in.push_back(p.get_until('\n'));
        p.ws();
    }

    string num = "";
    bool ok = false;
    ll ans = 0;
    int n = in.size(), m = in[0].length();

    auto is_digit = [](char c) {
        return c <= '9' && c >= '0';
    };

    auto is_valid = [&](int i, int j) {
        return i < n && j < m && i >= 0 && j >= 0 && !is_digit(in[i][j]) && in[i][j] != '.';
    };

    auto process = [&]() {
        if (num != "" && ok) {
            ans += stoll(num);
        }
        ok = false;
        num = "";
    };

    const vector<array<int, 2>> dirs = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}, {1, 1}, {-1, 1}, {-1, -1}, {1, -1}};
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (is_digit(in[i][j])) {
                num += in[i][j];
                for (auto [di, dj] : dirs) {
                    if (is_valid(i + di, j + dj)) {
                        ok = true;
                    }
                }
            }
            else if (num != "") {
                process();
            }
        }
        process();
    }

    cout << ans << endl;

    return 0;
}
